// Copyright 1998-2017 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "GeneratedCppIncludes.h"
#include "Private/SpinePluginPrivatePCH.h"
#include "SpinePlugin.generated.dep.h"
PRAGMA_DISABLE_OPTIMIZATION
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1SpinePlugin() {}
	void USpineAtlasAsset::StaticRegisterNativesUSpineAtlasAsset()
	{
	}
	IMPLEMENT_CLASS(USpineAtlasAsset, 3908144682);
	void USpineBoneDriverComponent::StaticRegisterNativesUSpineBoneDriverComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(USpineBoneDriverComponent::StaticClass(), "BeforeUpdateWorldTransform",(Native)&USpineBoneDriverComponent::execBeforeUpdateWorldTransform);
	}
	IMPLEMENT_CLASS(USpineBoneDriverComponent, 1983577621);
	void USpineBoneFollowerComponent::StaticRegisterNativesUSpineBoneFollowerComponent()
	{
	}
	IMPLEMENT_CLASS(USpineBoneFollowerComponent, 2172992048);
class UScriptStruct* FSpineAnimationStateMixData::StaticStruct()
{
	extern SPINEPLUGIN_API class UPackage* Z_Construct_UPackage__Script_SpinePlugin();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SPINEPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FSpineAnimationStateMixData();
		extern SPINEPLUGIN_API uint32 Get_Z_Construct_UScriptStruct_FSpineAnimationStateMixData_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSpineAnimationStateMixData, Z_Construct_UPackage__Script_SpinePlugin(), TEXT("SpineAnimationStateMixData"), sizeof(FSpineAnimationStateMixData), Get_Z_Construct_UScriptStruct_FSpineAnimationStateMixData_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSpineAnimationStateMixData(FSpineAnimationStateMixData::StaticStruct, TEXT("/Script/SpinePlugin"), TEXT("SpineAnimationStateMixData"), false, nullptr, nullptr);
static struct FScriptStruct_SpinePlugin_StaticRegisterNativesFSpineAnimationStateMixData
{
	FScriptStruct_SpinePlugin_StaticRegisterNativesFSpineAnimationStateMixData()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SpineAnimationStateMixData")),new UScriptStruct::TCppStructOps<FSpineAnimationStateMixData>);
	}
} ScriptStruct_SpinePlugin_StaticRegisterNativesFSpineAnimationStateMixData;
	void USpineSkeletonDataAsset::StaticRegisterNativesUSpineSkeletonDataAsset()
	{
	}
	IMPLEMENT_CLASS(USpineSkeletonDataAsset, 1340131438);
	void USpineSkeletonComponent::StaticRegisterNativesUSpineSkeletonComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonComponent::StaticClass(), "GetBoneWorldTransform",(Native)&USpineSkeletonComponent::execGetBoneWorldTransform);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonComponent::StaticClass(), "GetFlipX",(Native)&USpineSkeletonComponent::execGetFlipX);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonComponent::StaticClass(), "GetFlipY",(Native)&USpineSkeletonComponent::execGetFlipY);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonComponent::StaticClass(), "SetAttachment",(Native)&USpineSkeletonComponent::execSetAttachment);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonComponent::StaticClass(), "SetBonesToSetupPose",(Native)&USpineSkeletonComponent::execSetBonesToSetupPose);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonComponent::StaticClass(), "SetBoneWorldPosition",(Native)&USpineSkeletonComponent::execSetBoneWorldPosition);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonComponent::StaticClass(), "SetFlipX",(Native)&USpineSkeletonComponent::execSetFlipX);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonComponent::StaticClass(), "SetFlipY",(Native)&USpineSkeletonComponent::execSetFlipY);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonComponent::StaticClass(), "SetSkin",(Native)&USpineSkeletonComponent::execSetSkin);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonComponent::StaticClass(), "SetSlotsToSetupPose",(Native)&USpineSkeletonComponent::execSetSlotsToSetupPose);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonComponent::StaticClass(), "SetToSetupPose",(Native)&USpineSkeletonComponent::execSetToSetupPose);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonComponent::StaticClass(), "UpdateWorldTransform",(Native)&USpineSkeletonComponent::execUpdateWorldTransform);
	}
	IMPLEMENT_CLASS(USpineSkeletonComponent, 2012802345);
class UScriptStruct* FSpineEvent::StaticStruct()
{
	extern SPINEPLUGIN_API class UPackage* Z_Construct_UPackage__Script_SpinePlugin();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern SPINEPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FSpineEvent();
		extern SPINEPLUGIN_API uint32 Get_Z_Construct_UScriptStruct_FSpineEvent_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FSpineEvent, Z_Construct_UPackage__Script_SpinePlugin(), TEXT("SpineEvent"), sizeof(FSpineEvent), Get_Z_Construct_UScriptStruct_FSpineEvent_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FSpineEvent(FSpineEvent::StaticStruct, TEXT("/Script/SpinePlugin"), TEXT("SpineEvent"), false, nullptr, nullptr);
static struct FScriptStruct_SpinePlugin_StaticRegisterNativesFSpineEvent
{
	FScriptStruct_SpinePlugin_StaticRegisterNativesFSpineEvent()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("SpineEvent")),new UScriptStruct::TCppStructOps<FSpineEvent>);
	}
} ScriptStruct_SpinePlugin_StaticRegisterNativesFSpineEvent;
	void UTrackEntry::StaticRegisterNativesUTrackEntry()
	{
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetAlpha",(Native)&UTrackEntry::execGetAlpha);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetAnimationEnd",(Native)&UTrackEntry::execGetAnimationEnd);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetAnimationLast",(Native)&UTrackEntry::execGetAnimationLast);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetAnimationStart",(Native)&UTrackEntry::execGetAnimationStart);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetAttachmentThreshold",(Native)&UTrackEntry::execGetAttachmentThreshold);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetDelay",(Native)&UTrackEntry::execGetDelay);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetDrawOrderThreshold",(Native)&UTrackEntry::execGetDrawOrderThreshold);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetEventThreshold",(Native)&UTrackEntry::execGetEventThreshold);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetLoop",(Native)&UTrackEntry::execGetLoop);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetMixAlpha",(Native)&UTrackEntry::execGetMixAlpha);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetMixDuration",(Native)&UTrackEntry::execGetMixDuration);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetMixTime",(Native)&UTrackEntry::execGetMixTime);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetNextAnimationLast",(Native)&UTrackEntry::execGetNextAnimationLast);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetNextTrackLast",(Native)&UTrackEntry::execGetNextTrackLast);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetTimeScale",(Native)&UTrackEntry::execGetTimeScale);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetTrackEnd",(Native)&UTrackEntry::execGetTrackEnd);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetTrackIndex",(Native)&UTrackEntry::execGetTrackIndex);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetTrackLast",(Native)&UTrackEntry::execGetTrackLast);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "GetTrackTime",(Native)&UTrackEntry::execGetTrackTime);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "SetAlpha",(Native)&UTrackEntry::execSetAlpha);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "SetAnimationEnd",(Native)&UTrackEntry::execSetAnimationEnd);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "SetAnimationLast",(Native)&UTrackEntry::execSetAnimationLast);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "SetAnimationStart",(Native)&UTrackEntry::execSetAnimationStart);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "SetAttachmentThreshold",(Native)&UTrackEntry::execSetAttachmentThreshold);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "SetDelay",(Native)&UTrackEntry::execSetDelay);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "SetDrawOrderThreshold",(Native)&UTrackEntry::execSetDrawOrderThreshold);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "SetEventThreshold",(Native)&UTrackEntry::execSetEventThreshold);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "SetLoop",(Native)&UTrackEntry::execSetLoop);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "SetMixAlpha",(Native)&UTrackEntry::execSetMixAlpha);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "SetMixDuration",(Native)&UTrackEntry::execSetMixDuration);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "SetMixTime",(Native)&UTrackEntry::execSetMixTime);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "SetNextAnimationLast",(Native)&UTrackEntry::execSetNextAnimationLast);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "SetNextTrackLast",(Native)&UTrackEntry::execSetNextTrackLast);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "SetTimeScale",(Native)&UTrackEntry::execSetTimeScale);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "SetTrackEnd",(Native)&UTrackEntry::execSetTrackEnd);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "SetTrackLast",(Native)&UTrackEntry::execSetTrackLast);
		FNativeFunctionRegistrar::RegisterFunction(UTrackEntry::StaticClass(), "SetTrackTime",(Native)&UTrackEntry::execSetTrackTime);
	}
	IMPLEMENT_CLASS(UTrackEntry, 1479890941);
	void USpineSkeletonAnimationComponent::StaticRegisterNativesUSpineSkeletonAnimationComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonAnimationComponent::StaticClass(), "AddAnimation",(Native)&USpineSkeletonAnimationComponent::execAddAnimation);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonAnimationComponent::StaticClass(), "AddEmptyAnimation",(Native)&USpineSkeletonAnimationComponent::execAddEmptyAnimation);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonAnimationComponent::StaticClass(), "ClearTrack",(Native)&USpineSkeletonAnimationComponent::execClearTrack);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonAnimationComponent::StaticClass(), "ClearTracks",(Native)&USpineSkeletonAnimationComponent::execClearTracks);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonAnimationComponent::StaticClass(), "GetCurrent",(Native)&USpineSkeletonAnimationComponent::execGetCurrent);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonAnimationComponent::StaticClass(), "GetTimeScale",(Native)&USpineSkeletonAnimationComponent::execGetTimeScale);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonAnimationComponent::StaticClass(), "SetAnimation",(Native)&USpineSkeletonAnimationComponent::execSetAnimation);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonAnimationComponent::StaticClass(), "SetEmptyAnimation",(Native)&USpineSkeletonAnimationComponent::execSetEmptyAnimation);
		FNativeFunctionRegistrar::RegisterFunction(USpineSkeletonAnimationComponent::StaticClass(), "SetTimeScale",(Native)&USpineSkeletonAnimationComponent::execSetTimeScale);
	}
	IMPLEMENT_CLASS(USpineSkeletonAnimationComponent, 3027771457);
	void USpineSkeletonRendererComponent::StaticRegisterNativesUSpineSkeletonRendererComponent()
	{
	}
	IMPLEMENT_CLASS(USpineSkeletonRendererComponent, 1299760239);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UClass* Z_Construct_UClass_UObject();
	ENGINE_API class UClass* Z_Construct_UClass_UAssetImportData_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UTexture2D_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FTransform();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	PROCEDURALMESHCOMPONENT_API class UClass* Z_Construct_UClass_UProceduralMeshComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FLinearColor();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInterface_NoRegister();

	SPINEPLUGIN_API class UClass* Z_Construct_UClass_USpineAtlasAsset_NoRegister();
	SPINEPLUGIN_API class UClass* Z_Construct_UClass_USpineAtlasAsset();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineBoneDriverComponent_BeforeUpdateWorldTransform();
	SPINEPLUGIN_API class UClass* Z_Construct_UClass_USpineBoneDriverComponent_NoRegister();
	SPINEPLUGIN_API class UClass* Z_Construct_UClass_USpineBoneDriverComponent();
	SPINEPLUGIN_API class UClass* Z_Construct_UClass_USpineBoneFollowerComponent_NoRegister();
	SPINEPLUGIN_API class UClass* Z_Construct_UClass_USpineBoneFollowerComponent();
	SPINEPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FSpineAnimationStateMixData();
	SPINEPLUGIN_API class UClass* Z_Construct_UClass_USpineSkeletonDataAsset_NoRegister();
	SPINEPLUGIN_API class UClass* Z_Construct_UClass_USpineSkeletonDataAsset();
	SPINEPLUGIN_API class UFunction* Z_Construct_UDelegateFunction_SpinePlugin_SpineAfterUpdateWorldTransformDelegate__DelegateSignature();
	SPINEPLUGIN_API class UFunction* Z_Construct_UDelegateFunction_SpinePlugin_SpineBeforeUpdateWorldTransformDelegate__DelegateSignature();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonComponent_GetBoneWorldTransform();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonComponent_GetFlipX();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonComponent_GetFlipY();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonComponent_SetAttachment();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonComponent_SetBonesToSetupPose();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonComponent_SetBoneWorldPosition();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonComponent_SetFlipX();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonComponent_SetFlipY();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonComponent_SetSkin();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonComponent_SetSlotsToSetupPose();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonComponent_SetToSetupPose();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonComponent_UpdateWorldTransform();
	SPINEPLUGIN_API class UClass* Z_Construct_UClass_USpineSkeletonComponent_NoRegister();
	SPINEPLUGIN_API class UClass* Z_Construct_UClass_USpineSkeletonComponent();
	SPINEPLUGIN_API class UFunction* Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationDisposeDelegate__DelegateSignature();
	SPINEPLUGIN_API class UFunction* Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationEndDelegate__DelegateSignature();
	SPINEPLUGIN_API class UFunction* Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationCompleteDelegate__DelegateSignature();
	SPINEPLUGIN_API class UFunction* Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationInterruptDelegate__DelegateSignature();
	SPINEPLUGIN_API class UFunction* Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationEventDelegate__DelegateSignature();
	SPINEPLUGIN_API class UFunction* Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationStartDelegate__DelegateSignature();
	SPINEPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FSpineEvent();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetAlpha();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetAnimationEnd();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetAnimationLast();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetAnimationStart();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetAttachmentThreshold();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetDelay();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetDrawOrderThreshold();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetEventThreshold();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetLoop();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetMixAlpha();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetMixDuration();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetMixTime();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetNextAnimationLast();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetNextTrackLast();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetTimeScale();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetTrackEnd();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetTrackIndex();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetTrackLast();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_GetTrackTime();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_SetAlpha();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_SetAnimationEnd();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_SetAnimationLast();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_SetAnimationStart();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_SetAttachmentThreshold();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_SetDelay();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_SetDrawOrderThreshold();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_SetEventThreshold();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_SetLoop();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_SetMixAlpha();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_SetMixDuration();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_SetMixTime();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_SetNextAnimationLast();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_SetNextTrackLast();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_SetTimeScale();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_SetTrackEnd();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_SetTrackLast();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_UTrackEntry_SetTrackTime();
	SPINEPLUGIN_API class UClass* Z_Construct_UClass_UTrackEntry_NoRegister();
	SPINEPLUGIN_API class UClass* Z_Construct_UClass_UTrackEntry();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonAnimationComponent_AddAnimation();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonAnimationComponent_AddEmptyAnimation();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonAnimationComponent_ClearTrack();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonAnimationComponent_ClearTracks();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonAnimationComponent_GetCurrent();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonAnimationComponent_GetTimeScale();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonAnimationComponent_SetAnimation();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonAnimationComponent_SetEmptyAnimation();
	SPINEPLUGIN_API class UFunction* Z_Construct_UFunction_USpineSkeletonAnimationComponent_SetTimeScale();
	SPINEPLUGIN_API class UClass* Z_Construct_UClass_USpineSkeletonAnimationComponent_NoRegister();
	SPINEPLUGIN_API class UClass* Z_Construct_UClass_USpineSkeletonAnimationComponent();
	SPINEPLUGIN_API class UClass* Z_Construct_UClass_USpineSkeletonRendererComponent_NoRegister();
	SPINEPLUGIN_API class UClass* Z_Construct_UClass_USpineSkeletonRendererComponent();
	SPINEPLUGIN_API class UPackage* Z_Construct_UPackage__Script_SpinePlugin();
	UClass* Z_Construct_UClass_USpineAtlasAsset_NoRegister()
	{
		return USpineAtlasAsset::StaticClass();
	}
	UClass* Z_Construct_UClass_USpineAtlasAsset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_SpinePlugin();
			OuterClass = USpineAtlasAsset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_importData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("importData"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(importData, USpineAtlasAsset), 0x00220808000a0009, Z_Construct_UClass_UAssetImportData_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_atlasFileName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("atlasFileName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(atlasFileName, USpineAtlasAsset), 0x0020080000000000);
				UProperty* NewProp_rawData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("rawData"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(rawData, USpineAtlasAsset), 0x0020080000000000);
				UProperty* NewProp_atlasPages = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("atlasPages"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(atlasPages, USpineAtlasAsset), 0x0010000000000005);
				UProperty* NewProp_atlasPages_Inner = new(EC_InternalUseOnlyConstructor, NewProp_atlasPages, TEXT("atlasPages"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UTexture2D_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Spine"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SpineAtlasAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/SpineAtlasAsset.h"));
				MetaData->SetValue(NewProp_importData, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_importData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_importData, TEXT("ModuleRelativePath"), TEXT("Public/SpineAtlasAsset.h"));
				MetaData->SetValue(NewProp_atlasFileName, TEXT("ModuleRelativePath"), TEXT("Public/SpineAtlasAsset.h"));
				MetaData->SetValue(NewProp_rawData, TEXT("ModuleRelativePath"), TEXT("Public/SpineAtlasAsset.h"));
				MetaData->SetValue(NewProp_atlasPages, TEXT("Category"), TEXT("SpineAtlasAsset"));
				MetaData->SetValue(NewProp_atlasPages, TEXT("ModuleRelativePath"), TEXT("Public/SpineAtlasAsset.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USpineAtlasAsset(Z_Construct_UClass_USpineAtlasAsset, &USpineAtlasAsset::StaticClass, TEXT("USpineAtlasAsset"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USpineAtlasAsset);
	UFunction* Z_Construct_UFunction_USpineBoneDriverComponent_BeforeUpdateWorldTransform()
	{
		struct SpineBoneDriverComponent_eventBeforeUpdateWorldTransform_Parms
		{
			USpineSkeletonComponent* skeleton;
		};
		UObject* Outer=Z_Construct_UClass_USpineBoneDriverComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("BeforeUpdateWorldTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00080401, 65535, sizeof(SpineBoneDriverComponent_eventBeforeUpdateWorldTransform_Parms));
			UProperty* NewProp_skeleton = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("skeleton"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(skeleton, SpineBoneDriverComponent_eventBeforeUpdateWorldTransform_Parms), 0x0010000000080080, Z_Construct_UClass_USpineSkeletonComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineBoneDriverComponent.h"));
			MetaData->SetValue(NewProp_skeleton, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USpineBoneDriverComponent_NoRegister()
	{
		return USpineBoneDriverComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_USpineBoneDriverComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage__Script_SpinePlugin();
			OuterClass = USpineBoneDriverComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_USpineBoneDriverComponent_BeforeUpdateWorldTransform());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseScale, USpineBoneDriverComponent, bool);
				UProperty* NewProp_UseScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UseScale"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseScale, USpineBoneDriverComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(UseScale, USpineBoneDriverComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseRotation, USpineBoneDriverComponent, bool);
				UProperty* NewProp_UseRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UseRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseRotation, USpineBoneDriverComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(UseRotation, USpineBoneDriverComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UsePosition, USpineBoneDriverComponent, bool);
				UProperty* NewProp_UsePosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UsePosition"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UsePosition, USpineBoneDriverComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(UsePosition, USpineBoneDriverComponent), sizeof(bool), true);
				UProperty* NewProp_BoneName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoneName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(BoneName, USpineBoneDriverComponent), 0x0010000000000005);
				UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, USpineBoneDriverComponent), 0x0010000000000005, Z_Construct_UClass_AActor_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineBoneDriverComponent_BeforeUpdateWorldTransform(), "BeforeUpdateWorldTransform"); // 3724674220
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Custom"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SpineBoneDriverComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/SpineBoneDriverComponent.h"));
				MetaData->SetValue(NewProp_UseScale, TEXT("Category"), TEXT("SpineBoneDriverComponent"));
				MetaData->SetValue(NewProp_UseScale, TEXT("ModuleRelativePath"), TEXT("Public/SpineBoneDriverComponent.h"));
				MetaData->SetValue(NewProp_UseRotation, TEXT("Category"), TEXT("SpineBoneDriverComponent"));
				MetaData->SetValue(NewProp_UseRotation, TEXT("ModuleRelativePath"), TEXT("Public/SpineBoneDriverComponent.h"));
				MetaData->SetValue(NewProp_UsePosition, TEXT("Category"), TEXT("SpineBoneDriverComponent"));
				MetaData->SetValue(NewProp_UsePosition, TEXT("ModuleRelativePath"), TEXT("Public/SpineBoneDriverComponent.h"));
				MetaData->SetValue(NewProp_BoneName, TEXT("Category"), TEXT("SpineBoneDriverComponent"));
				MetaData->SetValue(NewProp_BoneName, TEXT("ModuleRelativePath"), TEXT("Public/SpineBoneDriverComponent.h"));
				MetaData->SetValue(NewProp_Target, TEXT("Category"), TEXT("SpineBoneDriverComponent"));
				MetaData->SetValue(NewProp_Target, TEXT("ModuleRelativePath"), TEXT("Public/SpineBoneDriverComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USpineBoneDriverComponent(Z_Construct_UClass_USpineBoneDriverComponent, &USpineBoneDriverComponent::StaticClass, TEXT("USpineBoneDriverComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USpineBoneDriverComponent);
	UClass* Z_Construct_UClass_USpineBoneFollowerComponent_NoRegister()
	{
		return USpineBoneFollowerComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_USpineBoneFollowerComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage__Script_SpinePlugin();
			OuterClass = USpineBoneFollowerComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseScale, USpineBoneFollowerComponent, bool);
				UProperty* NewProp_UseScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UseScale"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseScale, USpineBoneFollowerComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(UseScale, USpineBoneFollowerComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UseRotation, USpineBoneFollowerComponent, bool);
				UProperty* NewProp_UseRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UseRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UseRotation, USpineBoneFollowerComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(UseRotation, USpineBoneFollowerComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UsePosition, USpineBoneFollowerComponent, bool);
				UProperty* NewProp_UsePosition = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UsePosition"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UsePosition, USpineBoneFollowerComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(UsePosition, USpineBoneFollowerComponent), sizeof(bool), true);
				UProperty* NewProp_BoneName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BoneName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(BoneName, USpineBoneFollowerComponent), 0x0010000000000005);
				UProperty* NewProp_Target = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Target"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Target, USpineBoneFollowerComponent), 0x0010000000000005, Z_Construct_UClass_AActor_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Custom"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SpineBoneFollowerComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/SpineBoneFollowerComponent.h"));
				MetaData->SetValue(NewProp_UseScale, TEXT("Category"), TEXT("SpineBoneFollowerComponent"));
				MetaData->SetValue(NewProp_UseScale, TEXT("ModuleRelativePath"), TEXT("Public/SpineBoneFollowerComponent.h"));
				MetaData->SetValue(NewProp_UseRotation, TEXT("Category"), TEXT("SpineBoneFollowerComponent"));
				MetaData->SetValue(NewProp_UseRotation, TEXT("ModuleRelativePath"), TEXT("Public/SpineBoneFollowerComponent.h"));
				MetaData->SetValue(NewProp_UsePosition, TEXT("Category"), TEXT("SpineBoneFollowerComponent"));
				MetaData->SetValue(NewProp_UsePosition, TEXT("ModuleRelativePath"), TEXT("Public/SpineBoneFollowerComponent.h"));
				MetaData->SetValue(NewProp_BoneName, TEXT("Category"), TEXT("SpineBoneFollowerComponent"));
				MetaData->SetValue(NewProp_BoneName, TEXT("ModuleRelativePath"), TEXT("Public/SpineBoneFollowerComponent.h"));
				MetaData->SetValue(NewProp_Target, TEXT("Category"), TEXT("SpineBoneFollowerComponent"));
				MetaData->SetValue(NewProp_Target, TEXT("ModuleRelativePath"), TEXT("Public/SpineBoneFollowerComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USpineBoneFollowerComponent(Z_Construct_UClass_USpineBoneFollowerComponent, &USpineBoneFollowerComponent::StaticClass, TEXT("USpineBoneFollowerComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USpineBoneFollowerComponent);
	UScriptStruct* Z_Construct_UScriptStruct_FSpineAnimationStateMixData()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_SpinePlugin();
		extern uint32 Get_Z_Construct_UScriptStruct_FSpineAnimationStateMixData_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("SpineAnimationStateMixData"), sizeof(FSpineAnimationStateMixData), Get_Z_Construct_UScriptStruct_FSpineAnimationStateMixData_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpineAnimationStateMixData"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSpineAnimationStateMixData>, EStructFlags(0x00000201));
			UProperty* NewProp_Mix = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Mix"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Mix, FSpineAnimationStateMixData), 0x0010000000000005);
			UProperty* NewProp_To = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("To"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(To, FSpineAnimationStateMixData), 0x0010000000000005);
			UProperty* NewProp_From = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("From"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(From, FSpineAnimationStateMixData), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("Category"), TEXT("Spine"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonDataAsset.h"));
			MetaData->SetValue(NewProp_Mix, TEXT("Category"), TEXT("SpineAnimationStateMixData"));
			MetaData->SetValue(NewProp_Mix, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonDataAsset.h"));
			MetaData->SetValue(NewProp_To, TEXT("Category"), TEXT("SpineAnimationStateMixData"));
			MetaData->SetValue(NewProp_To, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonDataAsset.h"));
			MetaData->SetValue(NewProp_From, TEXT("Category"), TEXT("SpineAnimationStateMixData"));
			MetaData->SetValue(NewProp_From, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonDataAsset.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSpineAnimationStateMixData_CRC() { return 3341700326U; }
	UClass* Z_Construct_UClass_USpineSkeletonDataAsset_NoRegister()
	{
		return USpineSkeletonDataAsset::StaticClass();
	}
	UClass* Z_Construct_UClass_USpineSkeletonDataAsset()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_SpinePlugin();
			OuterClass = USpineSkeletonDataAsset::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_importData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("importData"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(importData, USpineSkeletonDataAsset), 0x00220808000a0009, Z_Construct_UClass_UAssetImportData_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_skeletonDataFileName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("skeletonDataFileName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(skeletonDataFileName, USpineSkeletonDataAsset), 0x0020080000000000);
				UProperty* NewProp_rawData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("rawData"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(rawData, USpineSkeletonDataAsset), 0x0020080000000000);
				UProperty* NewProp_rawData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_rawData, TEXT("rawData"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000);
				UProperty* NewProp_MixData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MixData"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(MixData, USpineSkeletonDataAsset), 0x0010000000000005);
				UProperty* NewProp_MixData_Inner = new(EC_InternalUseOnlyConstructor, NewProp_MixData, TEXT("MixData"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UScriptStruct_FSpineAnimationStateMixData());
				UProperty* NewProp_DefaultMix = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DefaultMix"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DefaultMix, USpineSkeletonDataAsset), 0x0010000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Spine"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SpineSkeletonDataAsset.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonDataAsset.h"));
				MetaData->SetValue(NewProp_importData, TEXT("Category"), TEXT("ImportSettings"));
				MetaData->SetValue(NewProp_importData, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_importData, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonDataAsset.h"));
				MetaData->SetValue(NewProp_skeletonDataFileName, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonDataAsset.h"));
				MetaData->SetValue(NewProp_rawData, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonDataAsset.h"));
				MetaData->SetValue(NewProp_MixData, TEXT("Category"), TEXT("SpineSkeletonDataAsset"));
				MetaData->SetValue(NewProp_MixData, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonDataAsset.h"));
				MetaData->SetValue(NewProp_DefaultMix, TEXT("Category"), TEXT("SpineSkeletonDataAsset"));
				MetaData->SetValue(NewProp_DefaultMix, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonDataAsset.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USpineSkeletonDataAsset(Z_Construct_UClass_USpineSkeletonDataAsset, &USpineSkeletonDataAsset::StaticClass, TEXT("USpineSkeletonDataAsset"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USpineSkeletonDataAsset);
	UFunction* Z_Construct_UDelegateFunction_SpinePlugin_SpineAfterUpdateWorldTransformDelegate__DelegateSignature()
	{
		struct _Script_SpinePlugin_eventSpineAfterUpdateWorldTransformDelegate_Parms
		{
			USpineSkeletonComponent* skeleton;
		};
		UObject* Outer=Z_Construct_UPackage__Script_SpinePlugin();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpineAfterUpdateWorldTransformDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_SpinePlugin_eventSpineAfterUpdateWorldTransformDelegate_Parms));
			UProperty* NewProp_skeleton = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("skeleton"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(skeleton, _Script_SpinePlugin_eventSpineAfterUpdateWorldTransformDelegate_Parms), 0x0010000000080080, Z_Construct_UClass_USpineSkeletonComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
			MetaData->SetValue(NewProp_skeleton, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_SpinePlugin_SpineBeforeUpdateWorldTransformDelegate__DelegateSignature()
	{
		struct _Script_SpinePlugin_eventSpineBeforeUpdateWorldTransformDelegate_Parms
		{
			USpineSkeletonComponent* skeleton;
		};
		UObject* Outer=Z_Construct_UPackage__Script_SpinePlugin();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpineBeforeUpdateWorldTransformDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_SpinePlugin_eventSpineBeforeUpdateWorldTransformDelegate_Parms));
			UProperty* NewProp_skeleton = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("skeleton"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(skeleton, _Script_SpinePlugin_eventSpineBeforeUpdateWorldTransformDelegate_Parms), 0x0010000000080080, Z_Construct_UClass_USpineSkeletonComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
			MetaData->SetValue(NewProp_skeleton, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonComponent_GetBoneWorldTransform()
	{
		struct SpineSkeletonComponent_eventGetBoneWorldTransform_Parms
		{
			FString BoneName;
			FTransform ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpineSkeletonComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetBoneWorldTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04820401, 65535, sizeof(SpineSkeletonComponent_eventGetBoneWorldTransform_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, SpineSkeletonComponent_eventGetBoneWorldTransform_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FTransform());
			UProperty* NewProp_BoneName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoneName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(BoneName, SpineSkeletonComponent_eventGetBoneWorldTransform_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Skeleton"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
			MetaData->SetValue(NewProp_BoneName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonComponent_GetFlipX()
	{
		struct SpineSkeletonComponent_eventGetFlipX_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpineSkeletonComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetFlipX"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpineSkeletonComponent_eventGetFlipX_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SpineSkeletonComponent_eventGetFlipX_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SpineSkeletonComponent_eventGetFlipX_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SpineSkeletonComponent_eventGetFlipX_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Skeleton"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonComponent_GetFlipY()
	{
		struct SpineSkeletonComponent_eventGetFlipY_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpineSkeletonComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetFlipY"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpineSkeletonComponent_eventGetFlipY_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SpineSkeletonComponent_eventGetFlipY_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SpineSkeletonComponent_eventGetFlipY_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SpineSkeletonComponent_eventGetFlipY_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Skeleton"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonComponent_SetAttachment()
	{
		struct SpineSkeletonComponent_eventSetAttachment_Parms
		{
			FString slotName;
			FString attachmentName;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpineSkeletonComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAttachment"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpineSkeletonComponent_eventSetAttachment_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SpineSkeletonComponent_eventSetAttachment_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SpineSkeletonComponent_eventSetAttachment_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SpineSkeletonComponent_eventSetAttachment_Parms), sizeof(bool), true);
			UProperty* NewProp_attachmentName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("attachmentName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(attachmentName, SpineSkeletonComponent_eventSetAttachment_Parms), 0x0010000000000080);
			UProperty* NewProp_slotName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("slotName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(slotName, SpineSkeletonComponent_eventSetAttachment_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Skeleton"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
			MetaData->SetValue(NewProp_attachmentName, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_slotName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonComponent_SetBonesToSetupPose()
	{
		UObject* Outer=Z_Construct_UClass_USpineSkeletonComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBonesToSetupPose"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Skeleton"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonComponent_SetBoneWorldPosition()
	{
		struct SpineSkeletonComponent_eventSetBoneWorldPosition_Parms
		{
			FString BoneName;
			FVector position;
		};
		UObject* Outer=Z_Construct_UClass_USpineSkeletonComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetBoneWorldPosition"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(SpineSkeletonComponent_eventSetBoneWorldPosition_Parms));
			UProperty* NewProp_position = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("position"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(position, SpineSkeletonComponent_eventSetBoneWorldPosition_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_BoneName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("BoneName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(BoneName, SpineSkeletonComponent_eventSetBoneWorldPosition_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Skeleton"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
			MetaData->SetValue(NewProp_position, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_BoneName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonComponent_SetFlipX()
	{
		struct SpineSkeletonComponent_eventSetFlipX_Parms
		{
			bool flipX;
		};
		UObject* Outer=Z_Construct_UClass_USpineSkeletonComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFlipX"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpineSkeletonComponent_eventSetFlipX_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(flipX, SpineSkeletonComponent_eventSetFlipX_Parms, bool);
			UProperty* NewProp_flipX = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("flipX"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(flipX, SpineSkeletonComponent_eventSetFlipX_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(flipX, SpineSkeletonComponent_eventSetFlipX_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Skeleton"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonComponent_SetFlipY()
	{
		struct SpineSkeletonComponent_eventSetFlipY_Parms
		{
			bool flipY;
		};
		UObject* Outer=Z_Construct_UClass_USpineSkeletonComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetFlipY"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpineSkeletonComponent_eventSetFlipY_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(flipY, SpineSkeletonComponent_eventSetFlipY_Parms, bool);
			UProperty* NewProp_flipY = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("flipY"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(flipY, SpineSkeletonComponent_eventSetFlipY_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(flipY, SpineSkeletonComponent_eventSetFlipY_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Skeleton"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonComponent_SetSkin()
	{
		struct SpineSkeletonComponent_eventSetSkin_Parms
		{
			FString SkinName;
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpineSkeletonComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSkin"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpineSkeletonComponent_eventSetSkin_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, SpineSkeletonComponent_eventSetSkin_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, SpineSkeletonComponent_eventSetSkin_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, SpineSkeletonComponent_eventSetSkin_Parms), sizeof(bool), true);
			UProperty* NewProp_SkinName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SkinName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(SkinName, SpineSkeletonComponent_eventSetSkin_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Skeleton"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
			MetaData->SetValue(NewProp_SkinName, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonComponent_SetSlotsToSetupPose()
	{
		UObject* Outer=Z_Construct_UClass_USpineSkeletonComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetSlotsToSetupPose"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Skeleton"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonComponent_SetToSetupPose()
	{
		UObject* Outer=Z_Construct_UClass_USpineSkeletonComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetToSetupPose"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Skeleton"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonComponent_UpdateWorldTransform()
	{
		UObject* Outer=Z_Construct_UClass_USpineSkeletonComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("UpdateWorldTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Skeleton"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USpineSkeletonComponent_NoRegister()
	{
		return USpineSkeletonComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_USpineSkeletonComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage__Script_SpinePlugin();
			OuterClass = USpineSkeletonComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonComponent_GetBoneWorldTransform());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonComponent_GetFlipX());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonComponent_GetFlipY());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonComponent_SetAttachment());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonComponent_SetBonesToSetupPose());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonComponent_SetBoneWorldPosition());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonComponent_SetFlipX());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonComponent_SetFlipY());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonComponent_SetSkin());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonComponent_SetSlotsToSetupPose());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonComponent_SetToSetupPose());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonComponent_UpdateWorldTransform());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AfterUpdateWorldTransform = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AfterUpdateWorldTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(AfterUpdateWorldTransform, USpineSkeletonComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_SpinePlugin_SpineAfterUpdateWorldTransformDelegate__DelegateSignature());
				UProperty* NewProp_BeforeUpdateWorldTransform = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BeforeUpdateWorldTransform"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(BeforeUpdateWorldTransform, USpineSkeletonComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_SpinePlugin_SpineBeforeUpdateWorldTransformDelegate__DelegateSignature());
				UProperty* NewProp_SkeletonData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SkeletonData"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SkeletonData, USpineSkeletonComponent), 0x0010000000000005, Z_Construct_UClass_USpineSkeletonDataAsset_NoRegister());
				UProperty* NewProp_Atlas = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Atlas"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Atlas, USpineSkeletonComponent), 0x0010000000000005, Z_Construct_UClass_USpineAtlasAsset_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonComponent_GetBoneWorldTransform(), "GetBoneWorldTransform"); // 1405309054
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonComponent_GetFlipX(), "GetFlipX"); // 54562180
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonComponent_GetFlipY(), "GetFlipY"); // 4175665081
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonComponent_SetAttachment(), "SetAttachment"); // 536112407
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonComponent_SetBonesToSetupPose(), "SetBonesToSetupPose"); // 2659851114
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonComponent_SetBoneWorldPosition(), "SetBoneWorldPosition"); // 2027921691
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonComponent_SetFlipX(), "SetFlipX"); // 1885965407
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonComponent_SetFlipY(), "SetFlipY"); // 977478265
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonComponent_SetSkin(), "SetSkin"); // 198588905
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonComponent_SetSlotsToSetupPose(), "SetSlotsToSetupPose"); // 3706060115
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonComponent_SetToSetupPose(), "SetToSetupPose"); // 3719165948
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonComponent_UpdateWorldTransform(), "UpdateWorldTransform"); // 2317672837
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Spine"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SpineSkeletonComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
				MetaData->SetValue(NewProp_AfterUpdateWorldTransform, TEXT("Category"), TEXT("Components|Spine|Skeleton"));
				MetaData->SetValue(NewProp_AfterUpdateWorldTransform, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
				MetaData->SetValue(NewProp_BeforeUpdateWorldTransform, TEXT("Category"), TEXT("Components|Spine|Skeleton"));
				MetaData->SetValue(NewProp_BeforeUpdateWorldTransform, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
				MetaData->SetValue(NewProp_SkeletonData, TEXT("Category"), TEXT("Spine"));
				MetaData->SetValue(NewProp_SkeletonData, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
				MetaData->SetValue(NewProp_Atlas, TEXT("Category"), TEXT("Spine"));
				MetaData->SetValue(NewProp_Atlas, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USpineSkeletonComponent(Z_Construct_UClass_USpineSkeletonComponent, &USpineSkeletonComponent::StaticClass, TEXT("USpineSkeletonComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USpineSkeletonComponent);
	UFunction* Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationDisposeDelegate__DelegateSignature()
	{
		struct _Script_SpinePlugin_eventSpineAnimationDisposeDelegate_Parms
		{
			UTrackEntry* entry;
		};
		UObject* Outer=Z_Construct_UPackage__Script_SpinePlugin();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpineAnimationDisposeDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_SpinePlugin_eventSpineAnimationDisposeDelegate_Parms));
			UProperty* NewProp_entry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("entry"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(entry, _Script_SpinePlugin_eventSpineAnimationDisposeDelegate_Parms), 0x0010000000000080, Z_Construct_UClass_UTrackEntry_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationEndDelegate__DelegateSignature()
	{
		struct _Script_SpinePlugin_eventSpineAnimationEndDelegate_Parms
		{
			UTrackEntry* entry;
		};
		UObject* Outer=Z_Construct_UPackage__Script_SpinePlugin();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpineAnimationEndDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_SpinePlugin_eventSpineAnimationEndDelegate_Parms));
			UProperty* NewProp_entry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("entry"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(entry, _Script_SpinePlugin_eventSpineAnimationEndDelegate_Parms), 0x0010000000000080, Z_Construct_UClass_UTrackEntry_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationCompleteDelegate__DelegateSignature()
	{
		struct _Script_SpinePlugin_eventSpineAnimationCompleteDelegate_Parms
		{
			UTrackEntry* entry;
		};
		UObject* Outer=Z_Construct_UPackage__Script_SpinePlugin();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpineAnimationCompleteDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_SpinePlugin_eventSpineAnimationCompleteDelegate_Parms));
			UProperty* NewProp_entry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("entry"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(entry, _Script_SpinePlugin_eventSpineAnimationCompleteDelegate_Parms), 0x0010000000000080, Z_Construct_UClass_UTrackEntry_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationInterruptDelegate__DelegateSignature()
	{
		struct _Script_SpinePlugin_eventSpineAnimationInterruptDelegate_Parms
		{
			UTrackEntry* entry;
		};
		UObject* Outer=Z_Construct_UPackage__Script_SpinePlugin();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpineAnimationInterruptDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_SpinePlugin_eventSpineAnimationInterruptDelegate_Parms));
			UProperty* NewProp_entry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("entry"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(entry, _Script_SpinePlugin_eventSpineAnimationInterruptDelegate_Parms), 0x0010000000000080, Z_Construct_UClass_UTrackEntry_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationEventDelegate__DelegateSignature()
	{
		struct _Script_SpinePlugin_eventSpineAnimationEventDelegate_Parms
		{
			UTrackEntry* entry;
			FSpineEvent evt;
		};
		UObject* Outer=Z_Construct_UPackage__Script_SpinePlugin();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpineAnimationEventDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_SpinePlugin_eventSpineAnimationEventDelegate_Parms));
			UProperty* NewProp_evt = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("evt"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(evt, _Script_SpinePlugin_eventSpineAnimationEventDelegate_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FSpineEvent());
			UProperty* NewProp_entry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("entry"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(entry, _Script_SpinePlugin_eventSpineAnimationEventDelegate_Parms), 0x0010000000000080, Z_Construct_UClass_UTrackEntry_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationStartDelegate__DelegateSignature()
	{
		struct _Script_SpinePlugin_eventSpineAnimationStartDelegate_Parms
		{
			UTrackEntry* entry;
		};
		UObject* Outer=Z_Construct_UPackage__Script_SpinePlugin();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpineAnimationStartDelegate__DelegateSignature"), RF_Public|RF_Transient|RF_MarkAsNative) UDelegateFunction(FObjectInitializer(), NULL, 0x00130000, 65535, sizeof(_Script_SpinePlugin_eventSpineAnimationStartDelegate_Parms));
			UProperty* NewProp_entry = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("entry"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(entry, _Script_SpinePlugin_eventSpineAnimationStartDelegate_Parms), 0x0010000000000080, Z_Construct_UClass_UTrackEntry_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UScriptStruct* Z_Construct_UScriptStruct_FSpineEvent()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_SpinePlugin();
		extern uint32 Get_Z_Construct_UScriptStruct_FSpineEvent_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("SpineEvent"), sizeof(FSpineEvent), Get_Z_Construct_UScriptStruct_FSpineEvent_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SpineEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FSpineEvent>, EStructFlags(0x00000201));
			UProperty* NewProp_Time = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Time"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(Time, FSpineEvent), 0x0010000000000014);
			UProperty* NewProp_FloatValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("FloatValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(FloatValue, FSpineEvent), 0x0010000000000014);
			UProperty* NewProp_IntValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("IntValue"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(IntValue, FSpineEvent), 0x0010000000000014);
			UProperty* NewProp_StringValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("StringValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(StringValue, FSpineEvent), 0x0010000000000014);
			UProperty* NewProp_Name = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("Name"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(Name, FSpineEvent), 0x0010000000000014);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("Category"), TEXT("Spine"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
			MetaData->SetValue(NewProp_Time, TEXT("Category"), TEXT("SpineEvent"));
			MetaData->SetValue(NewProp_Time, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
			MetaData->SetValue(NewProp_FloatValue, TEXT("Category"), TEXT("SpineEvent"));
			MetaData->SetValue(NewProp_FloatValue, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
			MetaData->SetValue(NewProp_IntValue, TEXT("Category"), TEXT("SpineEvent"));
			MetaData->SetValue(NewProp_IntValue, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
			MetaData->SetValue(NewProp_StringValue, TEXT("Category"), TEXT("SpineEvent"));
			MetaData->SetValue(NewProp_StringValue, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
			MetaData->SetValue(NewProp_Name, TEXT("Category"), TEXT("SpineEvent"));
			MetaData->SetValue(NewProp_Name, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FSpineEvent_CRC() { return 3095063000U; }
	UFunction* Z_Construct_UFunction_UTrackEntry_GetAlpha()
	{
		struct TrackEntry_eventGetAlpha_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetAlpha_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrackEntry_eventGetAlpha_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_GetAnimationEnd()
	{
		struct TrackEntry_eventGetAnimationEnd_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAnimationEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetAnimationEnd_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrackEntry_eventGetAnimationEnd_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_GetAnimationLast()
	{
		struct TrackEntry_eventGetAnimationLast_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAnimationLast"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetAnimationLast_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrackEntry_eventGetAnimationLast_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_GetAnimationStart()
	{
		struct TrackEntry_eventGetAnimationStart_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAnimationStart"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetAnimationStart_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrackEntry_eventGetAnimationStart_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_GetAttachmentThreshold()
	{
		struct TrackEntry_eventGetAttachmentThreshold_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetAttachmentThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetAttachmentThreshold_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrackEntry_eventGetAttachmentThreshold_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_GetDelay()
	{
		struct TrackEntry_eventGetDelay_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDelay"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetDelay_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrackEntry_eventGetDelay_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_GetDrawOrderThreshold()
	{
		struct TrackEntry_eventGetDrawOrderThreshold_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetDrawOrderThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetDrawOrderThreshold_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrackEntry_eventGetDrawOrderThreshold_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_GetEventThreshold()
	{
		struct TrackEntry_eventGetEventThreshold_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetEventThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetEventThreshold_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrackEntry_eventGetEventThreshold_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_GetLoop()
	{
		struct TrackEntry_eventGetLoop_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetLoop"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetLoop_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, TrackEntry_eventGetLoop_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, TrackEntry_eventGetLoop_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, TrackEntry_eventGetLoop_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_GetMixAlpha()
	{
		struct TrackEntry_eventGetMixAlpha_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMixAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetMixAlpha_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrackEntry_eventGetMixAlpha_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_GetMixDuration()
	{
		struct TrackEntry_eventGetMixDuration_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMixDuration"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetMixDuration_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrackEntry_eventGetMixDuration_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_GetMixTime()
	{
		struct TrackEntry_eventGetMixTime_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMixTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetMixTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrackEntry_eventGetMixTime_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_GetNextAnimationLast()
	{
		struct TrackEntry_eventGetNextAnimationLast_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNextAnimationLast"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetNextAnimationLast_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrackEntry_eventGetNextAnimationLast_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_GetNextTrackLast()
	{
		struct TrackEntry_eventGetNextTrackLast_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetNextTrackLast"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetNextTrackLast_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrackEntry_eventGetNextTrackLast_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_GetTimeScale()
	{
		struct TrackEntry_eventGetTimeScale_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTimeScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetTimeScale_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrackEntry_eventGetTimeScale_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_GetTrackEnd()
	{
		struct TrackEntry_eventGetTrackEnd_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTrackEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetTrackEnd_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrackEntry_eventGetTrackEnd_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_GetTrackIndex()
	{
		struct TrackEntry_eventGetTrackIndex_Parms
		{
			int32 ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTrackIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetTrackIndex_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(ReturnValue, TrackEntry_eventGetTrackIndex_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_GetTrackLast()
	{
		struct TrackEntry_eventGetTrackLast_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTrackLast"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetTrackLast_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrackEntry_eventGetTrackLast_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_GetTrackTime()
	{
		struct TrackEntry_eventGetTrackTime_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTrackTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventGetTrackTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, TrackEntry_eventGetTrackTime_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_SetAlpha()
	{
		struct TrackEntry_eventSetAlpha_Parms
		{
			float alpha;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventSetAlpha_Parms));
			UProperty* NewProp_alpha = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("alpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(alpha, TrackEntry_eventSetAlpha_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_SetAnimationEnd()
	{
		struct TrackEntry_eventSetAnimationEnd_Parms
		{
			float animationEnd;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAnimationEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventSetAnimationEnd_Parms));
			UProperty* NewProp_animationEnd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("animationEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(animationEnd, TrackEntry_eventSetAnimationEnd_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_SetAnimationLast()
	{
		struct TrackEntry_eventSetAnimationLast_Parms
		{
			float animationLast;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAnimationLast"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventSetAnimationLast_Parms));
			UProperty* NewProp_animationLast = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("animationLast"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(animationLast, TrackEntry_eventSetAnimationLast_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_SetAnimationStart()
	{
		struct TrackEntry_eventSetAnimationStart_Parms
		{
			float animationStart;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAnimationStart"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventSetAnimationStart_Parms));
			UProperty* NewProp_animationStart = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("animationStart"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(animationStart, TrackEntry_eventSetAnimationStart_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_SetAttachmentThreshold()
	{
		struct TrackEntry_eventSetAttachmentThreshold_Parms
		{
			float attachmentThreshold;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAttachmentThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventSetAttachmentThreshold_Parms));
			UProperty* NewProp_attachmentThreshold = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("attachmentThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(attachmentThreshold, TrackEntry_eventSetAttachmentThreshold_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_SetDelay()
	{
		struct TrackEntry_eventSetDelay_Parms
		{
			float delay;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetDelay"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventSetDelay_Parms));
			UProperty* NewProp_delay = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("delay"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(delay, TrackEntry_eventSetDelay_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_SetDrawOrderThreshold()
	{
		struct TrackEntry_eventSetDrawOrderThreshold_Parms
		{
			float drawOrderThreshold;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetDrawOrderThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventSetDrawOrderThreshold_Parms));
			UProperty* NewProp_drawOrderThreshold = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("drawOrderThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(drawOrderThreshold, TrackEntry_eventSetDrawOrderThreshold_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_SetEventThreshold()
	{
		struct TrackEntry_eventSetEventThreshold_Parms
		{
			float eventThreshold;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetEventThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventSetEventThreshold_Parms));
			UProperty* NewProp_eventThreshold = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("eventThreshold"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(eventThreshold, TrackEntry_eventSetEventThreshold_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_SetLoop()
	{
		struct TrackEntry_eventSetLoop_Parms
		{
			bool loop;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetLoop"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventSetLoop_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(loop, TrackEntry_eventSetLoop_Parms, bool);
			UProperty* NewProp_loop = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("loop"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(loop, TrackEntry_eventSetLoop_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(loop, TrackEntry_eventSetLoop_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_SetMixAlpha()
	{
		struct TrackEntry_eventSetMixAlpha_Parms
		{
			float mixAlpha;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMixAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventSetMixAlpha_Parms));
			UProperty* NewProp_mixAlpha = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("mixAlpha"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(mixAlpha, TrackEntry_eventSetMixAlpha_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_SetMixDuration()
	{
		struct TrackEntry_eventSetMixDuration_Parms
		{
			float mixDuration;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMixDuration"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventSetMixDuration_Parms));
			UProperty* NewProp_mixDuration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("mixDuration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(mixDuration, TrackEntry_eventSetMixDuration_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_SetMixTime()
	{
		struct TrackEntry_eventSetMixTime_Parms
		{
			float mixTime;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetMixTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventSetMixTime_Parms));
			UProperty* NewProp_mixTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("mixTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(mixTime, TrackEntry_eventSetMixTime_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_SetNextAnimationLast()
	{
		struct TrackEntry_eventSetNextAnimationLast_Parms
		{
			float nextAnimationLast;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetNextAnimationLast"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventSetNextAnimationLast_Parms));
			UProperty* NewProp_nextAnimationLast = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("nextAnimationLast"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(nextAnimationLast, TrackEntry_eventSetNextAnimationLast_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_SetNextTrackLast()
	{
		struct TrackEntry_eventSetNextTrackLast_Parms
		{
			float nextTrackLast;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetNextTrackLast"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventSetNextTrackLast_Parms));
			UProperty* NewProp_nextTrackLast = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("nextTrackLast"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(nextTrackLast, TrackEntry_eventSetNextTrackLast_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_SetTimeScale()
	{
		struct TrackEntry_eventSetTimeScale_Parms
		{
			float timeScale;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetTimeScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventSetTimeScale_Parms));
			UProperty* NewProp_timeScale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("timeScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(timeScale, TrackEntry_eventSetTimeScale_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_SetTrackEnd()
	{
		struct TrackEntry_eventSetTrackEnd_Parms
		{
			float trackEnd;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetTrackEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventSetTrackEnd_Parms));
			UProperty* NewProp_trackEnd = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("trackEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(trackEnd, TrackEntry_eventSetTrackEnd_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_SetTrackLast()
	{
		struct TrackEntry_eventSetTrackLast_Parms
		{
			float trackLast;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetTrackLast"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventSetTrackLast_Parms));
			UProperty* NewProp_trackLast = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("trackLast"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(trackLast, TrackEntry_eventSetTrackLast_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UTrackEntry_SetTrackTime()
	{
		struct TrackEntry_eventSetTrackTime_Parms
		{
			float trackTime;
		};
		UObject* Outer=Z_Construct_UClass_UTrackEntry();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetTrackTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(TrackEntry_eventSetTrackTime_Parms));
			UProperty* NewProp_trackTime = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("trackTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(trackTime, TrackEntry_eventSetTrackTime_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UTrackEntry_NoRegister()
	{
		return UTrackEntry::StaticClass();
	}
	UClass* Z_Construct_UClass_UTrackEntry()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UObject();
			Z_Construct_UPackage__Script_SpinePlugin();
			OuterClass = UTrackEntry::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetAlpha());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetAnimationEnd());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetAnimationLast());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetAnimationStart());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetAttachmentThreshold());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetDelay());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetDrawOrderThreshold());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetEventThreshold());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetLoop());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetMixAlpha());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetMixDuration());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetMixTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetNextAnimationLast());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetNextTrackLast());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetTimeScale());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetTrackEnd());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetTrackIndex());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetTrackLast());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_GetTrackTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_SetAlpha());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_SetAnimationEnd());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_SetAnimationLast());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_SetAnimationStart());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_SetAttachmentThreshold());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_SetDelay());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_SetDrawOrderThreshold());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_SetEventThreshold());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_SetLoop());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_SetMixAlpha());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_SetMixDuration());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_SetMixTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_SetNextAnimationLast());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_SetNextTrackLast());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_SetTimeScale());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_SetTrackEnd());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_SetTrackLast());
				OuterClass->LinkChild(Z_Construct_UFunction_UTrackEntry_SetTrackTime());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_AnimationDispose = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimationDispose"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(AnimationDispose, UTrackEntry), 0x0010000010080000, Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationDisposeDelegate__DelegateSignature());
				UProperty* NewProp_AnimationEnd = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimationEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(AnimationEnd, UTrackEntry), 0x0010000010080000, Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationEndDelegate__DelegateSignature());
				UProperty* NewProp_AnimationComplete = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimationComplete"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(AnimationComplete, UTrackEntry), 0x0010000010080000, Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationCompleteDelegate__DelegateSignature());
				UProperty* NewProp_AnimationEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimationEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(AnimationEvent, UTrackEntry), 0x0010000010080000, Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationEventDelegate__DelegateSignature());
				UProperty* NewProp_AnimationInterrupt = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimationInterrupt"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(AnimationInterrupt, UTrackEntry), 0x0010000010080000, Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationInterruptDelegate__DelegateSignature());
				UProperty* NewProp_AnimationStart = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimationStart"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(AnimationStart, UTrackEntry), 0x0010000010080000, Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationStartDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetAlpha(), "GetAlpha"); // 1080007539
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetAnimationEnd(), "GetAnimationEnd"); // 3124943936
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetAnimationLast(), "GetAnimationLast"); // 3113248426
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetAnimationStart(), "GetAnimationStart"); // 220773456
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetAttachmentThreshold(), "GetAttachmentThreshold"); // 1015511722
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetDelay(), "GetDelay"); // 3820824325
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetDrawOrderThreshold(), "GetDrawOrderThreshold"); // 2447744248
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetEventThreshold(), "GetEventThreshold"); // 1432191721
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetLoop(), "GetLoop"); // 3832211155
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetMixAlpha(), "GetMixAlpha"); // 505387662
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetMixDuration(), "GetMixDuration"); // 460940487
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetMixTime(), "GetMixTime"); // 1151580255
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetNextAnimationLast(), "GetNextAnimationLast"); // 3461453762
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetNextTrackLast(), "GetNextTrackLast"); // 3173426790
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetTimeScale(), "GetTimeScale"); // 49901473
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetTrackEnd(), "GetTrackEnd"); // 2288892946
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetTrackIndex(), "GetTrackIndex"); // 113979502
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetTrackLast(), "GetTrackLast"); // 1755284746
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_GetTrackTime(), "GetTrackTime"); // 613689389
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_SetAlpha(), "SetAlpha"); // 1828835706
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_SetAnimationEnd(), "SetAnimationEnd"); // 563369523
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_SetAnimationLast(), "SetAnimationLast"); // 3268299511
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_SetAnimationStart(), "SetAnimationStart"); // 106991048
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_SetAttachmentThreshold(), "SetAttachmentThreshold"); // 1509180003
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_SetDelay(), "SetDelay"); // 2547327129
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_SetDrawOrderThreshold(), "SetDrawOrderThreshold"); // 2655961598
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_SetEventThreshold(), "SetEventThreshold"); // 1364017815
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_SetLoop(), "SetLoop"); // 3004031484
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_SetMixAlpha(), "SetMixAlpha"); // 2565383313
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_SetMixDuration(), "SetMixDuration"); // 1598941947
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_SetMixTime(), "SetMixTime"); // 2789740205
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_SetNextAnimationLast(), "SetNextAnimationLast"); // 582368397
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_SetNextTrackLast(), "SetNextTrackLast"); // 1373897934
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_SetTimeScale(), "SetTimeScale"); // 2134663971
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_SetTrackEnd(), "SetTrackEnd"); // 972611834
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_SetTrackLast(), "SetTrackLast"); // 3726927438
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UTrackEntry_SetTrackTime(), "SetTrackTime"); // 3023984248
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("BlueprintType"), TEXT("true"));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Spine"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SpineSkeletonAnimationComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
				MetaData->SetValue(NewProp_AnimationDispose, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
				MetaData->SetValue(NewProp_AnimationDispose, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
				MetaData->SetValue(NewProp_AnimationEnd, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
				MetaData->SetValue(NewProp_AnimationEnd, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
				MetaData->SetValue(NewProp_AnimationComplete, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
				MetaData->SetValue(NewProp_AnimationComplete, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
				MetaData->SetValue(NewProp_AnimationEvent, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
				MetaData->SetValue(NewProp_AnimationEvent, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
				MetaData->SetValue(NewProp_AnimationInterrupt, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
				MetaData->SetValue(NewProp_AnimationInterrupt, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
				MetaData->SetValue(NewProp_AnimationStart, TEXT("Category"), TEXT("Components|Spine|TrackEntry"));
				MetaData->SetValue(NewProp_AnimationStart, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UTrackEntry(Z_Construct_UClass_UTrackEntry, &UTrackEntry::StaticClass, TEXT("UTrackEntry"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UTrackEntry);
	UFunction* Z_Construct_UFunction_USpineSkeletonAnimationComponent_AddAnimation()
	{
		struct SpineSkeletonAnimationComponent_eventAddAnimation_Parms
		{
			int32 trackIndex;
			FString animationName;
			bool loop;
			float delay;
			UTrackEntry* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpineSkeletonAnimationComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddAnimation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpineSkeletonAnimationComponent_eventAddAnimation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, SpineSkeletonAnimationComponent_eventAddAnimation_Parms), 0x0010000000000580, Z_Construct_UClass_UTrackEntry_NoRegister());
			UProperty* NewProp_delay = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("delay"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(delay, SpineSkeletonAnimationComponent_eventAddAnimation_Parms), 0x0010000000000080);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(loop, SpineSkeletonAnimationComponent_eventAddAnimation_Parms, bool);
			UProperty* NewProp_loop = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("loop"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(loop, SpineSkeletonAnimationComponent_eventAddAnimation_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(loop, SpineSkeletonAnimationComponent_eventAddAnimation_Parms), sizeof(bool), true);
			UProperty* NewProp_animationName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("animationName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(animationName, SpineSkeletonAnimationComponent_eventAddAnimation_Parms), 0x0010000000000080);
			UProperty* NewProp_trackIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("trackIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(trackIndex, SpineSkeletonAnimationComponent_eventAddAnimation_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonAnimationComponent_AddEmptyAnimation()
	{
		struct SpineSkeletonAnimationComponent_eventAddEmptyAnimation_Parms
		{
			int32 trackIndex;
			float mixDuration;
			float delay;
			UTrackEntry* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpineSkeletonAnimationComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddEmptyAnimation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpineSkeletonAnimationComponent_eventAddEmptyAnimation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, SpineSkeletonAnimationComponent_eventAddEmptyAnimation_Parms), 0x0010000000000580, Z_Construct_UClass_UTrackEntry_NoRegister());
			UProperty* NewProp_delay = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("delay"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(delay, SpineSkeletonAnimationComponent_eventAddEmptyAnimation_Parms), 0x0010000000000080);
			UProperty* NewProp_mixDuration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("mixDuration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(mixDuration, SpineSkeletonAnimationComponent_eventAddEmptyAnimation_Parms), 0x0010000000000080);
			UProperty* NewProp_trackIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("trackIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(trackIndex, SpineSkeletonAnimationComponent_eventAddEmptyAnimation_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonAnimationComponent_ClearTrack()
	{
		struct SpineSkeletonAnimationComponent_eventClearTrack_Parms
		{
			int32 trackIndex;
		};
		UObject* Outer=Z_Construct_UClass_USpineSkeletonAnimationComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearTrack"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpineSkeletonAnimationComponent_eventClearTrack_Parms));
			UProperty* NewProp_trackIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("trackIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(trackIndex, SpineSkeletonAnimationComponent_eventClearTrack_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonAnimationComponent_ClearTracks()
	{
		UObject* Outer=Z_Construct_UClass_USpineSkeletonAnimationComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearTracks"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonAnimationComponent_GetCurrent()
	{
		struct SpineSkeletonAnimationComponent_eventGetCurrent_Parms
		{
			int32 trackIndex;
			UTrackEntry* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpineSkeletonAnimationComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCurrent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpineSkeletonAnimationComponent_eventGetCurrent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, SpineSkeletonAnimationComponent_eventGetCurrent_Parms), 0x0010000000000580, Z_Construct_UClass_UTrackEntry_NoRegister());
			UProperty* NewProp_trackIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("trackIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(trackIndex, SpineSkeletonAnimationComponent_eventGetCurrent_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonAnimationComponent_GetTimeScale()
	{
		struct SpineSkeletonAnimationComponent_eventGetTimeScale_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpineSkeletonAnimationComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetTimeScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpineSkeletonAnimationComponent_eventGetTimeScale_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, SpineSkeletonAnimationComponent_eventGetTimeScale_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonAnimationComponent_SetAnimation()
	{
		struct SpineSkeletonAnimationComponent_eventSetAnimation_Parms
		{
			int32 trackIndex;
			FString animationName;
			bool loop;
			UTrackEntry* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpineSkeletonAnimationComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetAnimation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpineSkeletonAnimationComponent_eventSetAnimation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, SpineSkeletonAnimationComponent_eventSetAnimation_Parms), 0x0010000000000580, Z_Construct_UClass_UTrackEntry_NoRegister());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(loop, SpineSkeletonAnimationComponent_eventSetAnimation_Parms, bool);
			UProperty* NewProp_loop = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("loop"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(loop, SpineSkeletonAnimationComponent_eventSetAnimation_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(loop, SpineSkeletonAnimationComponent_eventSetAnimation_Parms), sizeof(bool), true);
			UProperty* NewProp_animationName = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("animationName"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(animationName, SpineSkeletonAnimationComponent_eventSetAnimation_Parms), 0x0010000000000080);
			UProperty* NewProp_trackIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("trackIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(trackIndex, SpineSkeletonAnimationComponent_eventSetAnimation_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonAnimationComponent_SetEmptyAnimation()
	{
		struct SpineSkeletonAnimationComponent_eventSetEmptyAnimation_Parms
		{
			int32 trackIndex;
			float mixDuration;
			UTrackEntry* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_USpineSkeletonAnimationComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetEmptyAnimation"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpineSkeletonAnimationComponent_eventSetEmptyAnimation_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, SpineSkeletonAnimationComponent_eventSetEmptyAnimation_Parms), 0x0010000000000580, Z_Construct_UClass_UTrackEntry_NoRegister());
			UProperty* NewProp_mixDuration = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("mixDuration"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(mixDuration, SpineSkeletonAnimationComponent_eventSetEmptyAnimation_Parms), 0x0010000000000080);
			UProperty* NewProp_trackIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("trackIndex"), RF_Public|RF_Transient|RF_MarkAsNative) UUnsizedIntProperty(CPP_PROPERTY_BASE(trackIndex, SpineSkeletonAnimationComponent_eventSetEmptyAnimation_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_USpineSkeletonAnimationComponent_SetTimeScale()
	{
		struct SpineSkeletonAnimationComponent_eventSetTimeScale_Parms
		{
			float timeScale;
		};
		UObject* Outer=Z_Construct_UClass_USpineSkeletonAnimationComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetTimeScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(SpineSkeletonAnimationComponent_eventSetTimeScale_Parms));
			UProperty* NewProp_timeScale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("timeScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(timeScale, SpineSkeletonAnimationComponent_eventSetTimeScale_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Components|Spine|Animation"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Blueprint functions"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_USpineSkeletonAnimationComponent_NoRegister()
	{
		return USpineSkeletonAnimationComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_USpineSkeletonAnimationComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_USpineSkeletonComponent();
			Z_Construct_UPackage__Script_SpinePlugin();
			OuterClass = USpineSkeletonAnimationComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonAnimationComponent_AddAnimation());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonAnimationComponent_AddEmptyAnimation());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonAnimationComponent_ClearTrack());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonAnimationComponent_ClearTracks());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonAnimationComponent_GetCurrent());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonAnimationComponent_GetTimeScale());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonAnimationComponent_SetAnimation());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonAnimationComponent_SetEmptyAnimation());
				OuterClass->LinkChild(Z_Construct_UFunction_USpineSkeletonAnimationComponent_SetTimeScale());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_trackEntries = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("trackEntries"), RF_Public|RF_Transient|RF_MarkAsNative) USetProperty(CPP_PROPERTY_BASE(trackEntries, USpineSkeletonAnimationComponent), 0x0020080000000000);
				UProperty* NewProp_trackEntries_ElementProp = new(EC_InternalUseOnlyConstructor, NewProp_trackEntries, TEXT("trackEntries"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UTrackEntry_NoRegister());
				UProperty* NewProp_AnimationDispose = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimationDispose"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(AnimationDispose, USpineSkeletonAnimationComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationDisposeDelegate__DelegateSignature());
				UProperty* NewProp_AnimationEnd = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimationEnd"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(AnimationEnd, USpineSkeletonAnimationComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationEndDelegate__DelegateSignature());
				UProperty* NewProp_AnimationComplete = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimationComplete"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(AnimationComplete, USpineSkeletonAnimationComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationCompleteDelegate__DelegateSignature());
				UProperty* NewProp_AnimationEvent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimationEvent"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(AnimationEvent, USpineSkeletonAnimationComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationEventDelegate__DelegateSignature());
				UProperty* NewProp_AnimationInterrupt = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimationInterrupt"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(AnimationInterrupt, USpineSkeletonAnimationComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationInterruptDelegate__DelegateSignature());
				UProperty* NewProp_AnimationStart = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AnimationStart"), RF_Public|RF_Transient|RF_MarkAsNative) UMulticastDelegateProperty(CPP_PROPERTY_BASE(AnimationStart, USpineSkeletonAnimationComponent), 0x0010000010080000, Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationStartDelegate__DelegateSignature());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonAnimationComponent_AddAnimation(), "AddAnimation"); // 1247360406
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonAnimationComponent_AddEmptyAnimation(), "AddEmptyAnimation"); // 15353418
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonAnimationComponent_ClearTrack(), "ClearTrack"); // 1432327518
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonAnimationComponent_ClearTracks(), "ClearTracks"); // 4091438216
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonAnimationComponent_GetCurrent(), "GetCurrent"); // 1439760795
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonAnimationComponent_GetTimeScale(), "GetTimeScale"); // 3670208541
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonAnimationComponent_SetAnimation(), "SetAnimation"); // 1224582116
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonAnimationComponent_SetEmptyAnimation(), "SetEmptyAnimation"); // 1293614561
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_USpineSkeletonAnimationComponent_SetTimeScale(), "SetTimeScale"); // 3069670541
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Spine"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SpineSkeletonAnimationComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
				MetaData->SetValue(NewProp_trackEntries, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
				MetaData->SetValue(NewProp_trackEntries, TEXT("ToolTip"), TEXT("keep track of track entries so they won't get GCed while\nin transit within a blueprint"));
				MetaData->SetValue(NewProp_AnimationDispose, TEXT("Category"), TEXT("Components|Spine|Animation"));
				MetaData->SetValue(NewProp_AnimationDispose, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
				MetaData->SetValue(NewProp_AnimationEnd, TEXT("Category"), TEXT("Components|Spine|Animation"));
				MetaData->SetValue(NewProp_AnimationEnd, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
				MetaData->SetValue(NewProp_AnimationComplete, TEXT("Category"), TEXT("Components|Spine|Animation"));
				MetaData->SetValue(NewProp_AnimationComplete, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
				MetaData->SetValue(NewProp_AnimationEvent, TEXT("Category"), TEXT("Components|Spine|Animation"));
				MetaData->SetValue(NewProp_AnimationEvent, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
				MetaData->SetValue(NewProp_AnimationInterrupt, TEXT("Category"), TEXT("Components|Spine|Animation"));
				MetaData->SetValue(NewProp_AnimationInterrupt, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
				MetaData->SetValue(NewProp_AnimationStart, TEXT("Category"), TEXT("Components|Spine|Animation"));
				MetaData->SetValue(NewProp_AnimationStart, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonAnimationComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USpineSkeletonAnimationComponent(Z_Construct_UClass_USpineSkeletonAnimationComponent, &USpineSkeletonAnimationComponent::StaticClass, TEXT("USpineSkeletonAnimationComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USpineSkeletonAnimationComponent);
	UClass* Z_Construct_UClass_USpineSkeletonRendererComponent_NoRegister()
	{
		return USpineSkeletonRendererComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_USpineSkeletonRendererComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UProceduralMeshComponent();
			Z_Construct_UPackage__Script_SpinePlugin();
			OuterClass = USpineSkeletonRendererComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_atlasScreenBlendMaterials = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("atlasScreenBlendMaterials"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(atlasScreenBlendMaterials, USpineSkeletonRendererComponent), 0x0020080000000000);
				UProperty* NewProp_atlasScreenBlendMaterials_Inner = new(EC_InternalUseOnlyConstructor, NewProp_atlasScreenBlendMaterials, TEXT("atlasScreenBlendMaterials"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
				UProperty* NewProp_atlasMultiplyBlendMaterials = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("atlasMultiplyBlendMaterials"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(atlasMultiplyBlendMaterials, USpineSkeletonRendererComponent), 0x0020080000000000);
				UProperty* NewProp_atlasMultiplyBlendMaterials_Inner = new(EC_InternalUseOnlyConstructor, NewProp_atlasMultiplyBlendMaterials, TEXT("atlasMultiplyBlendMaterials"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
				UProperty* NewProp_atlasAdditiveBlendMaterials = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("atlasAdditiveBlendMaterials"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(atlasAdditiveBlendMaterials, USpineSkeletonRendererComponent), 0x0020080000000000);
				UProperty* NewProp_atlasAdditiveBlendMaterials_Inner = new(EC_InternalUseOnlyConstructor, NewProp_atlasAdditiveBlendMaterials, TEXT("atlasAdditiveBlendMaterials"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
				UProperty* NewProp_atlasNormalBlendMaterials = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("atlasNormalBlendMaterials"), RF_Public|RF_Transient|RF_MarkAsNative) UArrayProperty(CPP_PROPERTY_BASE(atlasNormalBlendMaterials, USpineSkeletonRendererComponent), 0x0020080000000000);
				UProperty* NewProp_atlasNormalBlendMaterials_Inner = new(EC_InternalUseOnlyConstructor, NewProp_atlasNormalBlendMaterials, TEXT("atlasNormalBlendMaterials"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_UMaterialInstanceDynamic_NoRegister());
				UProperty* NewProp_Color = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Color"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Color, USpineSkeletonRendererComponent), 0x0010000000000005, Z_Construct_UScriptStruct_FLinearColor());
				UProperty* NewProp_TextureParameterName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TextureParameterName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(TextureParameterName, USpineSkeletonRendererComponent), 0x0010000000000005);
				UProperty* NewProp_DepthOffset = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DepthOffset"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(DepthOffset, USpineSkeletonRendererComponent), 0x0010000000000005);
				UProperty* NewProp_ScreenBlendMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ScreenBlendMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ScreenBlendMaterial, USpineSkeletonRendererComponent), 0x0010000000000015, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_MultiplyBlendMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MultiplyBlendMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MultiplyBlendMaterial, USpineSkeletonRendererComponent), 0x0010000000000015, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_AdditiveBlendMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AdditiveBlendMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(AdditiveBlendMaterial, USpineSkeletonRendererComponent), 0x0010000000000015, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_NormalBlendMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("NormalBlendMaterial"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NormalBlendMaterial, USpineSkeletonRendererComponent), 0x0010000000000015, Z_Construct_UClass_UMaterialInterface_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Spine"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object LOD Mobility Trigger"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("SpineSkeletonRendererComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonRendererComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_atlasScreenBlendMaterials, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonRendererComponent.h"));
				MetaData->SetValue(NewProp_atlasMultiplyBlendMaterials, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonRendererComponent.h"));
				MetaData->SetValue(NewProp_atlasAdditiveBlendMaterials, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonRendererComponent.h"));
				MetaData->SetValue(NewProp_atlasNormalBlendMaterials, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonRendererComponent.h"));
				MetaData->SetValue(NewProp_atlasNormalBlendMaterials, TEXT("ToolTip"), TEXT("Need to hold on to the dynamic instances, or the GC will kill us while updating them"));
				MetaData->SetValue(NewProp_Color, TEXT("Category"), TEXT("Spine"));
				MetaData->SetValue(NewProp_Color, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonRendererComponent.h"));
				MetaData->SetValue(NewProp_TextureParameterName, TEXT("Category"), TEXT("Spine"));
				MetaData->SetValue(NewProp_TextureParameterName, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonRendererComponent.h"));
				MetaData->SetValue(NewProp_DepthOffset, TEXT("Category"), TEXT("Spine"));
				MetaData->SetValue(NewProp_DepthOffset, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonRendererComponent.h"));
				MetaData->SetValue(NewProp_ScreenBlendMaterial, TEXT("Category"), TEXT("Spine"));
				MetaData->SetValue(NewProp_ScreenBlendMaterial, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonRendererComponent.h"));
				MetaData->SetValue(NewProp_MultiplyBlendMaterial, TEXT("Category"), TEXT("Spine"));
				MetaData->SetValue(NewProp_MultiplyBlendMaterial, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonRendererComponent.h"));
				MetaData->SetValue(NewProp_AdditiveBlendMaterial, TEXT("Category"), TEXT("Spine"));
				MetaData->SetValue(NewProp_AdditiveBlendMaterial, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonRendererComponent.h"));
				MetaData->SetValue(NewProp_NormalBlendMaterial, TEXT("Category"), TEXT("Spine"));
				MetaData->SetValue(NewProp_NormalBlendMaterial, TEXT("ModuleRelativePath"), TEXT("Public/SpineSkeletonRendererComponent.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_USpineSkeletonRendererComponent(Z_Construct_UClass_USpineSkeletonRendererComponent, &USpineSkeletonRendererComponent::StaticClass, TEXT("USpineSkeletonRendererComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(USpineSkeletonRendererComponent);
	UPackage* Z_Construct_UPackage__Script_SpinePlugin()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/SpinePlugin")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0x0196CD01;
			Guid.B = 0x8520F65A;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

			Z_Construct_UDelegateFunction_SpinePlugin_SpineBeforeUpdateWorldTransformDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_SpinePlugin_SpineAfterUpdateWorldTransformDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationStartDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationEventDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationInterruptDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationCompleteDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationEndDelegate__DelegateSignature();
			Z_Construct_UDelegateFunction_SpinePlugin_SpineAnimationDisposeDelegate__DelegateSignature();
		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
